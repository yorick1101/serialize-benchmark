// automatically generated by the FlatBuffers compiler, do not modify

package me.yorick.poc.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Order extends Table {
  public static Order getRootAsOrder(ByteBuffer _bb) { return getRootAsOrder(_bb, new Order()); }
  public static Order getRootAsOrder(ByteBuffer _bb, Order obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Order __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte side() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public double price() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double qty() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public String symbol() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer symbolAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer symbolInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public String exchange() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer exchangeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer exchangeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }

  public static int createOrder(FlatBufferBuilder builder,
      byte side,
      double price,
      double qty,
      int symbolOffset,
      int exchangeOffset) {
    builder.startObject(5);
    Order.addQty(builder, qty);
    Order.addPrice(builder, price);
    Order.addExchange(builder, exchangeOffset);
    Order.addSymbol(builder, symbolOffset);
    Order.addSide(builder, side);
    return Order.endOrder(builder);
  }

  public static void startOrder(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addSide(FlatBufferBuilder builder, byte side) { builder.addByte(0, side, 0); }
  public static void addPrice(FlatBufferBuilder builder, double price) { builder.addDouble(1, price, 0.0); }
  public static void addQty(FlatBufferBuilder builder, double qty) { builder.addDouble(2, qty, 0.0); }
  public static void addSymbol(FlatBufferBuilder builder, int symbolOffset) { builder.addOffset(3, symbolOffset, 0); }
  public static void addExchange(FlatBufferBuilder builder, int exchangeOffset) { builder.addOffset(4, exchangeOffset, 0); }
  public static int endOrder(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

